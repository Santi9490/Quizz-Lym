//
//  Implements JavaCC parser for simple s-expressions (sums and products)
//





options {
  IGNORE_CASE = true;
  STATIC = false;
}
PARSER_BEGIN(S_ExpParser)
package uniandes.lym.parserJavaCC.sExpParser;

import java.util.*;
 
public class S_ExpParser {
} 
 
PARSER_END(S_ExpParser)

SKIP :
{
 	" " | "\r" | "\t" | "\n"
}
 

TOKEN :
{
     < #DIGIT: "0" | "1" | "2"| "3" | "4" | "5" |  "6" | "7" | "8" |"9" >
|   < #LETTER: ["A"-"Z"] >
|    < NAME: ( <LETTER>  ( <LETTER > | < DIGIT >)* )>
|    < NUM: (  < DIGIT >)+ >

}

TOKEN :
{
    < PLUS: "+" >
|   < MULT: "*" >
|   < CONS: "cons" >
|   < LIST: "list" >
|   < CAR: "car" >
|   < CDR: "cdr" >
|   < CHS: "chs" >
|   < SQR: "sqr" >
|   < APP: "app" >
|   < MAP: "map" >
|   < NIL: "nil" >
}






void sExp():
{}
{
    < NUM >
|   < NAME >
|   "(" < PLUS > (sExp())+ ")"
|   "(" < MULT > (sExp())+ ")"
|   "(" < CONS > sExp() sExp() ")"
|   "(" < LIST > (sExp())* ")"
|   "(" < CAR > sExp() ")"
|   "(" < CDR > sExp() ")"
|   "(" < CHS > sExp() ")"
|   "(" < SQR > sExp() ")"
|   "(" < APP > sExp() sExp() ")"
|   "(" < MAP > < NAME > sExp() ")"
}

void sExp() returns [int value]:
{ int tempValue; }
{
    < NUM > { value = Integer.parseInt(token.image); }
|   "(" < PLUS > sExp() { value = tempValue = $sExp.value; } (sExp() { value += $sExp.value; })* ")"
|   "(" < MULT > sExp() { value = tempValue = $sExp.value; } (sExp() { value *= $sExp.value; })* ")"
|   "(" < CONS > sExp() sExp() ")"
|   "(" < LIST > (sExp())* ")" 
|   "(" < CAR > sExp() ")" 
|   "(" < CDR > sExp() ")" 
|   "(" < CHS > sExp() { value = -$sExp.value; } ")"
|   "(" < SQR > sExp() { value = $sExp.value * $sExp.value; } ")"
|   "(" < APP > sExp() sExp() ")" 
|   "(" < MAP > < NAME > sExp() ")" 

}



